import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:sensors_plus/sensors_plus.dart';
import 'catalog_screen.dart';
import 'cart_screen.dart';
import 'favorites_screen.dart';
import 'profile_screen.dart';
import 'courier_home_screen.dart';

enum ProductType { milk, fruits, berries, meat, fish, vegetables }

class StorageInfoScreen extends StatelessWidget {
  const StorageInfoScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–¢–∞—É–∞—Ä–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É –µ—Ä–µ–∂–µ–ª–µ—Ä—ñ'),
        backgroundColor: Colors.green,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '1. –°“Ø—Ç ”©–Ω—ñ–º–¥–µ—Ä—ñ ü•õüßÄ',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: 5‚Äì7 –∫“Ø–Ω (–∞—à—ã–ª“ì–∞–Ω —Å–æ“£)'),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +2¬∞C ‚Äì +4¬∞C'),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: –¢–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç–∞ –∂–∞–±—ã“õ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–¥–µ –Ω–µ–º–µ—Å–µ ”©–∑ –æ—Ä–∞–º—ã–Ω–¥–∞.',
            ),
            const Divider(height: 24),
            const Text(
              '2. –ï—Ç –∂”ô–Ω–µ –±–∞–ª—ã“õ üçñüêü',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ:'),
            const Text('  ‚Ä¢ –®–∏–∫—ñ –µ—Ç: 1‚Äì3 –∫“Ø–Ω'),
            const Text('  ‚Ä¢ –ü—ñ—Å–∫–µ–Ω –µ—Ç: 3‚Äì4 –∫“Ø–Ω'),
            const Text('  ‚Ä¢ –ë–∞–ª—ã“õ: 1‚Äì2 –∫“Ø–Ω'),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0¬∞C ‚Äì +2¬∞C'),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: –¢—ã“ì—ã–∑ –∂–∞–±—ã–ª“ì–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–¥–µ, —Ç–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç—ã“£ –µ“£ —Å–∞–ª“õ—ã–Ω –±”©–ª—ñ–≥—ñ–Ω–¥–µ. “∞–∑–∞“õ —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –º“±–∑–¥–∞—Ç—É “õ–∞–∂–µ—Ç.',
            ),
            const Divider(height: 24),
            const Text(
              '3. –ñ–µ–º—ñ—Å—Ç–µ—Ä –º–µ–Ω –∫”©–∫”©–Ω—ñ—Å—Ç–µ—Ä üçéü•ï',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: 5‚Äì14 –∫“Ø–Ω (—Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã)'),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +4¬∞C ‚Äì +8¬∞C'),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ:'),
            const Text(
              '  ‚Ä¢ –ñ–µ–º—ñ—Å—Ç–µ—Ä ‚Äì –∞—Ä–Ω–∞–π—ã –±”©–ª—ñ–º–¥–µ (–∫–µ–π–±—ñ—Ä–µ—É—ñ —Ç–æ“£–∞–∑—ã—Ç“õ—ã—à—Å—ã–∑ —Å–∞“õ—Ç–∞–ª–∞–¥—ã, –º—ã—Å–∞–ª—ã, –±–∞–Ω–∞–Ω –º–µ–Ω –ª–∏–º–æ–Ω)',
            ),
            const Text('  ‚Ä¢ –ö”©–∫”©–Ω—ñ—Å—Ç–µ—Ä ‚Äì –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω –ø–∞–∫–µ—Ç—ñ–º–µ–Ω –Ω–µ–º–µ—Å–µ “õ–∞“ì–∞–∑–¥–∞.'),
            const Divider(height: 24),
            const Text(
              '4. –ñ“±–º—ã—Ä—Ç“õ–∞ ü•ö',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: 3‚Äì4 –∞–ø—Ç–∞'),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +2¬∞C ‚Äì +5¬∞C'),
            const Text('‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: –¢–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç–∞, —Ç—ñ–∫ “õ–æ–π—ã–ø —Å–∞“õ—Ç–∞—É.'),
            const Divider(height: 24),
            const Text(
              '5. –ù–∞–Ω –∂”ô–Ω–µ –Ω–∞—É–±–∞–π—Ö–∞–Ω–∞ ”©–Ω—ñ–º–¥–µ—Ä—ñ üçûü•ê',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: 2‚Äì3 –∫“Ø–Ω (–±”©–ª–º–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Å—ã–Ω–¥–∞), 7 –∫“Ø–Ω–≥–µ –¥–µ–π—ñ–Ω (—Ç–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç–∞)',
            ),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +18¬∞C ‚Äì +20¬∞C'),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: “ö–∞“ì–∞–∑ –ø–∞–∫–µ—Ç—Ç–µ –Ω–µ–º–µ—Å–µ –Ω–∞–Ω “õ–æ—Ä–∞–±—ã–Ω–¥–∞. “∞–∑–∞“õ —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –º“±–∑–¥–∞—Ç—ã–ø “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã.',
            ),
            const Divider(height: 24),
            const Text(
              '6. –ö–æ–Ω—Å–µ—Ä–≤—ñ–ª–µ—Ä ü•´',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: –ê—à—ã–ª–º–∞“ì–∞–Ω ‚Äî 1‚Äì2 –∂—ã–ª, –∞—à—ã–ª“ì–∞–Ω ‚Äî 2‚Äì3 –∫“Ø–Ω',
            ),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: +4¬∞C (–∞—à—ã–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω)'),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: –ê—à—ã–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω ‚Äî ”ô–π–Ω–µ–∫ –Ω–µ–º–µ—Å–µ –ø–ª–∞—Å—Ç–∏–∫ —ã–¥—ã—Å“õ–∞ —Å–∞–ª—ã–ø, —Ç–æ“£–∞–∑—ã—Ç“õ—ã—à—Ç–∞.',
            ),
            const Divider(height: 24),
            const Text(
              '7. –ú“±–∑–¥–∞—Ç—ã–ª“ì–∞–Ω ”©–Ω—ñ–º–¥–µ—Ä ‚ùÑÔ∏è',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É –º–µ—Ä–∑—ñ–º—ñ: 3 –∞–π–¥–∞–Ω 12 –∞–π“ì–∞ –¥–µ–π—ñ–Ω (”©–Ω—ñ–º–≥–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã)',
            ),
            const Text('‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ‚Äì18¬∞C'),
            const Text(
              '‚Ä¢ –°–∞“õ—Ç–∞—É ”ô–¥—ñ—Å—ñ: –ì–µ—Ä–º–µ—Ç–∏–∫–∞–ª—ã“õ –æ—Ä–∞–ª“ì–∞–Ω –∫“Ø–π–¥–µ –º“±–∑–¥–∞—Ç“õ—ã—à—Ç–∞.',
            ),
          ],
        ),
      ),
    );
  }
}

class RecipesScreen extends StatelessWidget {
  const RecipesScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–†–µ—Ü–µ–ø—Ç—Ç–µ—Ä'),
        backgroundColor: Colors.green,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '1. –¢–∞“£“ì—ã –∞—Å ‚Äî –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç—ã ü•ëüçû',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('“ö“±—Ä–∞–º—ã:'),
            const Text('‚Ä¢ 1 —Ç—ñ–ª—ñ–º –Ω–∞–Ω'),
            const Text('‚Ä¢ ¬Ω –∞–≤–æ–∫–∞–¥–æ'),
            const Text('‚Ä¢ 1 “õ–∞–π–Ω–∞—Ç—ã–ª“ì–∞–Ω –∂“±–º—ã—Ä—Ç“õ–∞'),
            const Text('‚Ä¢ –¢“±–∑, –±“±—Ä—ã—à, –ª–∏–º–æ–Ω —à—ã—Ä—ã–Ω—ã'),
            const SizedBox(height: 8),
            const Text('–î–∞–π—ã–Ω–¥–∞—É:'),
            const Text('1. –ù–∞–Ω–¥—ã “õ—É—ã—Ä—ã–ø –∞–ª—ã“£—ã–∑.'),
            const Text('2. –ê–≤–æ–∫–∞–¥–æ–Ω—ã –µ–∑—ñ–ø, —Ç“±–∑, –±“±—Ä—ã—à, –ª–∏–º–æ–Ω —à—ã—Ä—ã–Ω—ã–Ω “õ–æ—Å—ã“£—ã–∑.'),
            const Text('3. –ù–∞–Ω–Ω—ã“£ “Ø—Å—Ç—ñ–Ω–µ –∂–∞“ì—ã–ø, –∂“±–º—ã—Ä—Ç“õ–∞ —Ç—ñ–ª—ñ–º–¥–µ—Ä—ñ–Ω “õ–æ–π—ã“£—ã–∑.'),
            const Divider(height: 24),
            const Text(
              '2. –¢–∞“£“ì—ã –∞—Å ‚Äî –ô–æ–≥—É—Ä—Ç –ø–µ–Ω –∂–µ–º—ñ—Å –±–æ—Ç“õ–∞—Å—ã üçìü•£',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('“ö“±—Ä–∞–º—ã:'),
            const Text('‚Ä¢ 4 –∞—Å “õ–∞—Å—ã“õ —Å“±–ª—ã'),
            const Text('‚Ä¢ 1 —Å—Ç–∞“õ–∞–Ω —Å“Ø—Ç –Ω–µ–º–µ—Å–µ —Å—É'),
            const Text('‚Ä¢ 3 –∞—Å “õ–∞—Å—ã“õ –π–æ–≥—É—Ä—Ç'),
            const Text('‚Ä¢ –ñ–µ–º—ñ—Å—Ç–µ—Ä (–±–∞–Ω–∞–Ω, “õ“±–ª–ø—ã–Ω–∞–π, —Ç.–±.)'),
            const SizedBox(height: 8),
            const Text('–î–∞–π—ã–Ω–¥–∞—É:'),
            const Text(
              '1. –°“±–ª—ã–Ω—ã —Å“Ø—Ç–ø–µ–Ω –±—ñ—Ä–≥–µ “õ–∞–π–Ω–∞—Ç—ã–ø, –∂“±–º—Å–∞—Ä“ì–∞–Ω—à–∞ –ø—ñ—Å—ñ—Ä—ñ“£—ñ–∑.',
            ),
            const Text('2. –ñ–æ“ì–∞—Ä—ã–Ω–∞–Ω –π–æ–≥—É—Ä—Ç –ø–µ–Ω –∂–µ–º—ñ—Å—Ç–µ—Ä–¥—ñ “õ–æ—Å—ã“£—ã–∑.'),
            const Divider(height: 24),
            const Text(
              '3. –¢“Ø—Å–∫—ñ –∞—Å ‚Äî “ö–∞—Ä–∞“õ“±–º—ã“õ –ø–µ–Ω —Ç–∞—É—ã“õ –µ—Ç—ñ ü•©üçö',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('“ö“±—Ä–∞–º—ã:'),
            const Text('‚Ä¢ 100 –≥ —Ç–∞—É—ã“õ –µ—Ç—ñ'),
            const Text('‚Ä¢ ¬Ω —Å—Ç–∞“õ–∞–Ω “õ–∞—Ä–∞“õ“±–º—ã“õ'),
            const Text('‚Ä¢ –ü–∏—è–∑, —Å”ô–±—ñ–∑'),
            const Text('‚Ä¢ –¢“±–∑, –¥”ô–º–¥–µ—É—ñ—à—Ç–µ—Ä'),
            const SizedBox(height: 8),
            const Text('–î–∞–π—ã–Ω–¥–∞—É:'),
            const Text('1. “ö–∞—Ä–∞“õ“±–º—ã“õ—Ç—ã 15 –º–∏–Ω—É—Ç “õ–∞–π–Ω–∞—Ç—ã“£—ã–∑.'),
            const Text('2. –¢–∞—É—ã“õ—Ç—ã “õ—É—ã—Ä—ã–ø, –∫”©–∫”©–Ω—ñ—Å—Ç–µ—Ä “õ–æ—Å—ã“£—ã–∑.'),
            const Text('3. “ö–∞—Ä–∞“õ“±–º—ã“õ–ø–µ–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—ã“£—ã–∑.'),
            const Divider(height: 24),
            const Text(
              '4. –ö–µ—à–∫—ñ –∞—Å ‚Äî –ö”©–∫”©–Ω—ñ—Å —Å–æ—Ä–ø–∞—Å—ã ü•¶ü•ï',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('“ö“±—Ä–∞–º—ã:'),
            const Text('‚Ä¢ –ö–∞—Ä—Ç–æ–ø, —Å”ô–±—ñ–∑, –±—Ä–æ–∫–∫–æ–ª–∏'),
            const Text('‚Ä¢ –ü–∏—è–∑, —Å–∞—Ä—ã–º—Å–∞“õ'),
            const Text('‚Ä¢ –¢“±–∑, –ª–∞–≤—Ä –∂–∞–ø—ã—Ä–∞“ì—ã'),
            const SizedBox(height: 8),
            const Text('–î–∞–π—ã–Ω–¥–∞—É:'),
            const Text('1. –ö”©–∫”©–Ω—ñ—Å—Ç–µ—Ä–¥—ñ —Ç—É—Ä–∞–ø, “õ–∞–π–Ω–∞“ì–∞–Ω —Å—É“ì–∞ —Å–∞–ª—ã“£—ã–∑.'),
            const Text(
              '2. –î”ô–º—ñ–Ω–µ “õ–∞—Ä–∞–π —Ç“±–∑, –∂–∞–ø—ã—Ä–∞“õ “õ–æ—Å—ã–ø 20 –º–∏–Ω—É—Ç –ø—ñ—Å—ñ—Ä—ñ“£—ñ–∑.',
            ),
            const Divider(height: 24),
            const Text(
              '5. –ö–µ—à–∫—ñ –∞—Å ‚Äî –ñ–µ“£—ñ–ª —Å–∞–ª–∞—Ç ü•ó',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('“ö“±—Ä–∞–º—ã:'),
            const Text('‚Ä¢ “ö–∏—è—Ä, “õ—ã–∑–∞–Ω–∞“õ, –∂–∞–ø—ã—Ä–∞“õ—Ç—ã —Å–∞–ª–∞—Ç'),
            const Text('‚Ä¢ –ó”ô–π—Ç“Ø–Ω –º–∞–π—ã'),
            const Text('‚Ä¢ –õ–∏–º–æ–Ω —à—ã—Ä—ã–Ω—ã, —Ç“±–∑'),
            const SizedBox(height: 8),
            const Text('–î–∞–π—ã–Ω–¥–∞—É:'),
            const Text('1. –ë–∞—Ä–ª—ã“õ –∫”©–∫”©–Ω—ñ—Å—Ç—ñ —Ç—É—Ä–∞“£—ã–∑.'),
            const Text('2. –ú–∞–π –º–µ–Ω –ª–∏–º–æ–Ω–º–µ–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—ã“£—ã–∑.'),
          ],
        ),
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final user = FirebaseAuth.instance.currentUser;
  final databaseRef = FirebaseDatabase.instance.ref();

  String name = '';
  String role = '';
  List<Map<String, dynamic>> allProducts = [];

  final List<Map<String, dynamic>> categories = [
    {
      'icon': Icons.local_drink,
      'label': '–°“Ø—Ç',
      'type': ProductType.milk,
      'background':
          'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcSagetn0fua1839eP0i0oqvM63pdlwP0DHW9g&s',
    },
    {
      'icon': Icons.apple,
      'label': '–ñ–µ–º—ñ—Å—Ç–µ—Ä',
      'type': ProductType.fruits,
      'background':
          'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcTDbNyySuf4W9DehG-Aj1RFNDJ83I4Vbmy5pQ&s',
    },
    {
      'icon': Icons.grass,
      'label': '–ñ–∏–¥–µ–∫—Ç–µ—Ä',
      'type': ProductType.berries,
      'background': 'https://stolicaonego.ru/images/news/505/505278/main.jpg',
    },
    {
      'icon': Icons.set_meal,
      'label': '–ï—Ç',
      'type': ProductType.meat,
      'background':
          'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcRrr4sbCLsqvapA-XxwGjFqaVyw0Kx7iQaLRQ&s',
    },
    {
      'icon': Icons.set_meal_outlined,
      'label': '–ë–∞–ª—ã“õ',
      'type': ProductType.fish,
      'background':
          'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcRcYFS-3vIORSAndHDyGRpy24aggo5LIk0e-A&s',
    },
    {
      'icon': Icons.eco,
      'label': '–û–≤–æ—â–∏',
      'type': ProductType.vegetables,
      'background': 'https://cdn-icons-png.flaticon.com/512/766/766330.png',
    },
  ];

  final List<String> bannerImages = [
    'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcR5iEDONBcC9Iv9Akxg-ZjddEGvSm5Nve9Jpg&s',
    'https://www.diabetesaustralia.com.au/wp-content/uploads/fruit-and-veg-1208790371.jpg',
    'https://images.squarespace-cdn.com/content/v1/59f0e6beace8641044d76e9c/1669587646206-6Z76MY4X3GBFKIUQZJ4R/Social+Meat.jpeg',
  ];

  int _currentBannerIndex = 1;
  Timer? _bannerTimer;
  Timer? _searchTimer;
  String _lastSearchText = '';

  int _currentIndex = 2;
  List<Widget> _pages = [];
  List<String> floatingEmojis = [''];
  double offsetX = 0.2;
  double offsetY = 0.4;

  @override
  void initState() {
    super.initState();
    _playNatureSounds();
    getUserData();
    fetchProducts();
    startBannerTimer();
    accelerometerEvents.listen((AccelerometerEvent event) {
      setState(() {
        offsetX = event.x;
        offsetY = event.y;
      });
    });
  }

  @override
  void dispose() {
    _bannerTimer?.cancel();
    _searchTimer?.cancel();
    super.dispose();
  }

  void startBannerTimer() {
    _bannerTimer = Timer.periodic(const Duration(seconds: 3), (_) {
      if (mounted) {
        setState(() {
          _currentBannerIndex = (_currentBannerIndex + 1) % bannerImages.length;
        });
      }
    });
  }

  Future<void> getUserData() async {
    if (user != null) {
      final snapshot = await databaseRef.child('users/${user!.uid}').get();
      if (!snapshot.exists || snapshot.value == null) {
        setState(() => role = 'buyer');
        return;
      }

      final data = Map<String, dynamic>.from(snapshot.value as Map);
      final userRole = data['role'] ?? 'buyer';

      setState(() {
        name = data['name'] ?? '';
        role = userRole;
      });

      if (userRole == 'buyer') {
        setState(() {
          _pages = [
            buildMainPage(),
            const CatalogScreen(initialFilter: null, initialSearch: ''),
            const CartScreen(),
            const FavoritesScreen(),
            const ProfileScreen(),
          ];
        });
      } else if (userRole == 'courier') {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const CourierHomeScreen()),
          );
        });
      } else if (userRole == 'seller') {
        setState(() {
          _pages = [const ProfileScreen()];
        });
      }
    }
  }

  Future<void> fetchProducts() async {
    final snapshot = await databaseRef.child('products').get();
    if (snapshot.exists) {
      final data = Map<String, dynamic>.from(snapshot.value as Map);
      List<Map<String, dynamic>> products = [];
      data.forEach((key, value) {
        final product = Map<String, dynamic>.from(value);
        product['id'] = key;
        products.add(product);
      });
      setState(() => allProducts = products);
    }
  }

  Future<Map<String, dynamic>> _getProductRating(String productId) async {
    final reviewsRef = databaseRef.child('reviews/$productId');
    final snapshot = await reviewsRef.get();
    if (!snapshot.exists) return {'average': 0.0, 'count': 0};
    final reviews = Map<dynamic, dynamic>.from(snapshot.value as Map);
    if (reviews.isEmpty) return {'average': 0.0, 'count': 0};
    double totalRating = reviews.values.fold(
      0,
      (sum, review) => sum + (review['rating'] ?? 0),
    );
    return {'average': totalRating / reviews.length, 'count': reviews.length};
  }

  Future<void> _playNatureSounds() async {}

  Widget buildMainPage() {
    final lowestPrice =
        List<Map<String, dynamic>>.from(allProducts)
          ..sort((a, b) => (a['price'] ?? 0).compareTo(b['price'] ?? 0))
          ..take(5);

    final highestDiscount =
        List<Map<String, dynamic>>.from(allProducts)
          ..sort((a, b) => (b['discount'] ?? 0).compareTo(a['discount'] ?? 0))
          ..take(5);

    List<Map<String, dynamic>> highRated = [];
    Future.wait(
      allProducts.map((product) async {
        final ratingData = await _getProductRating(product['id']);
        product['averageRating'] = ratingData['average'];
        product['reviewCount'] = ratingData['count'];
        if (ratingData['average'] >= 4.0 && ratingData['count'] >= 3) {
          highRated.add(product);
        }
      }),
    ).then((_) {
      highRated.sort(
        (a, b) => (b['averageRating'] ?? 0).compareTo(a['averageRating'] ?? 0),
      );
      highRated = highRated.take(5).toList();
    });

    return Stack(
      children: [
        Container(
          decoration: const BoxDecoration(
            image: DecorationImage(
              image: NetworkImage(
                'https://impro.usercontent.one/appid/oneComShop/domain/myexoticfruit.com/media/myexoticfruit.com/webshopmedia/dragonfruit%20red-1561254739488.jpg?&withoutEnlargement&resize=1920+9999&webp&quality=85',
              ),
              fit: BoxFit.cover,
              opacity: 0.3,
            ),
          ),
        ),
        SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 45),
              Text(
                '“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑, $name üëã',
                style: const TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                decoration: InputDecoration(
                  hintText: '–¢–∞—É–∞—Ä–ª–∞—Ä –Ω–µ–º–µ—Å–µ “õ—ã–∑–º–µ—Ç—Ç–µ—Ä —ñ–∑–¥–µ—É...',
                  prefixIcon: const Icon(Icons.search),
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide.none,
                  ),
                ),
                onChanged: (value) {
                  if (value.trim().isEmpty || value == _lastSearchText) return;
                  _searchTimer?.cancel();
                  _searchTimer = Timer(const Duration(milliseconds: 500), () {
                    _lastSearchText = value;
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder:
                            (_) => CatalogScreen(
                              initialSearch: value,
                              initialFilter: null,
                            ),
                      ),
                    );
                  });
                },
              ),
              const SizedBox(height: 16),

              Column(
                children: [
                  GestureDetector(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => const StorageInfoScreen(),
                        ),
                      );
                    },
                    child: AnimatedSwitcher(
                      duration: const Duration(milliseconds: 600),
                      child: ClipRRect(
                        key: ValueKey(_currentBannerIndex),
                        borderRadius: BorderRadius.circular(16),
                        child: Image.network(
                          bannerImages[_currentBannerIndex],
                          height: 180,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  GestureDetector(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => const RecipesScreen(),
                        ),
                      );
                    },
                    child: AnimatedSwitcher(
                      duration: const Duration(milliseconds: 600),
                      child: ClipRRect(
                        key: ValueKey(_currentBannerIndex + 100),
                        borderRadius: BorderRadius.circular(16),
                        child: Image.network(
                          bannerImages[(_currentBannerIndex + 1) %
                              bannerImages.length],
                          height: 160,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              const Text(
                '–°–∞–Ω–∞—Ç—Ç–∞—Ä',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 12),
              GridView.count(
                crossAxisCount: 3,
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
                children:
                    categories.map((category) {
                      return GestureDetector(
                        onTap: () {
                          Navigator.of(context).push(
                            MaterialPageRoute(
                              builder:
                                  (_) => CatalogScreen(
                                    initialFilter: category['type'],
                                    initialSearch: '',
                                  ),
                            ),
                          );
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(16),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.shade300,
                                blurRadius: 8,
                                offset: const Offset(2, 4),
                              ),
                            ],
                          ),
                          padding: const EdgeInsets.all(2),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(category['icon'], size: 30),
                              const SizedBox(height: 8),
                              Text(
                                category['label'],
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        ).animate().scale(duration: 500.ms),
                      );
                    }).toList(),
              ),
              const SizedBox(height: 20),
              const Text(
                '“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 12),

              const Text(
                '–ï“£ —Ç”©–º–µ–Ω –±–∞“ì–∞',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              SizedBox(
                height: 160,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: lowestPrice.length,
                  itemBuilder: (context, index) {
                    final product = lowestPrice[index];
                    return GestureDetector(
                      onTap: () {
                        Navigator.of(context).push(
                          MaterialPageRoute(
                            builder:
                                (_) => CatalogScreen(
                                  initialFilter: null,
                                  initialSearch: product['name'] ?? '',
                                ),
                          ),
                        );
                      },
                      child: Container(
                        width: 140,
                        margin: const EdgeInsets.only(right: 12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.shade300,
                              blurRadius: 8,
                              offset: const Offset(2, 4),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            ClipRRect(
                              borderRadius: const BorderRadius.vertical(
                                top: Radius.circular(16),
                              ),
                              child: Image.network(
                                product['image'] ?? '',
                                width: double.infinity,
                                height: 80,
                                fit: BoxFit.cover,
                                errorBuilder:
                                    (context, error, stackTrace) => const Icon(
                                      Icons.broken_image,
                                      size: 50,
                                    ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(8),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    product['name'] ?? '',
                                    style: const TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    '${product['price'] ?? 0} ‚Ç∏',
                                    style: const TextStyle(
                                      fontSize: 12,
                                      color: Colors.green,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ).animate().fade(duration: 400.ms),
                    );
                  },
                ),
              ),
              const SizedBox(height: 16),

              const Text(
                '–ï“£ “Ø–ª–∫–µ–Ω –∂–µ“£—ñ–ª–¥—ñ–∫—Ç–µ—Ä',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              SizedBox(
                height: 160,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: highestDiscount.length,
                  itemBuilder: (context, index) {
                    final product = highestDiscount[index];
                    return GestureDetector(
                      onTap: () {
                        Navigator.of(context).push(
                          MaterialPageRoute(
                            builder:
                                (_) => CatalogScreen(
                                  initialFilter: null,
                                  initialSearch: product['name'] ?? '',
                                ),
                          ),
                        );
                      },
                      child: Container(
                        width: 140,
                        margin: const EdgeInsets.only(right: 12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.shade300,
                              blurRadius: 8,
                              offset: const Offset(2, 4),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            ClipRRect(
                              borderRadius: const BorderRadius.vertical(
                                top: Radius.circular(16),
                              ),
                              child: Image.network(
                                product['image'] ?? '',
                                width: double.infinity,
                                height: 80,
                                fit: BoxFit.cover,
                                errorBuilder:
                                    (context, error, stackTrace) => const Icon(
                                      Icons.broken_image,
                                      size: 50,
                                    ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(8),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    product['name'] ?? '',
                                    style: const TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    '${product['price'] ?? 0} ‚Ç∏',
                                    style: const TextStyle(
                                      fontSize: 12,
                                      color: Colors.green,
                                    ),
                                  ),
                                  if ((product['discount'] ?? 0) > 0)
                                    Text(
                                      '–ñ–µ“£—ñ–ª–¥—ñ–∫: ${product['discount']}%',
                                      style: const TextStyle(
                                        fontSize: 12,
                                        color: Colors.red,
                                      ),
                                    ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ).animate().fade(duration: 400.ms),
                    );
                  },
                ),
              ),
              const SizedBox(height: 16),

              const Text(
                '–ñ–æ“ì–∞—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              const SizedBox(height: 8),
              SizedBox(
                height: 160,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: highRated.length,
                  itemBuilder: (context, index) {
                    final product = highRated[index];
                    return GestureDetector(
                      onTap: () {
                        Navigator.of(context).push(
                          MaterialPageRoute(
                            builder:
                                (_) => CatalogScreen(
                                  initialFilter: null,
                                  initialSearch: product['name'] ?? '',
                                ),
                          ),
                        );
                      },
                      child: Container(
                        width: 140,
                        margin: const EdgeInsets.only(right: 12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.shade300,
                              blurRadius: 8,
                              offset: const Offset(2, 4),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            ClipRRect(
                              borderRadius: const BorderRadius.vertical(
                                top: Radius.circular(16),
                              ),
                              child: Image.network(
                                product['image'] ?? '',
                                width: double.infinity,
                                height: 80,
                                fit: BoxFit.cover,
                                errorBuilder:
                                    (context, error, stackTrace) => const Icon(
                                      Icons.broken_image,
                                      size: 50,
                                    ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(8),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    product['name'] ?? '',
                                    style: const TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    '${product['price'] ?? 0} ‚Ç∏',
                                    style: const TextStyle(
                                      fontSize: 12,
                                      color: Colors.green,
                                    ),
                                  ),
                                  FutureBuilder<Map<String, dynamic>>(
                                    future: _getProductRating(product['id']),
                                    builder: (context, snapshot) {
                                      if (!snapshot.hasData)
                                        return const SizedBox();
                                      final ratingData = snapshot.data!;
                                      return Text(
                                        '–†–µ–π—Ç–∏–Ω–≥: ${ratingData['average'].toStringAsFixed(1)} (${ratingData['count']} –ø—ñ–∫—ñ—Ä)',
                                        style: const TextStyle(fontSize: 12),
                                      );
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ).animate().fade(duration: 400.ms),
                    );
                  },
                ),
              ),
            ],
          ),
        ),

        Positioned(
          top: MediaQuery.of(context).size.height * 0.5 + offsetY * 10,
          left: MediaQuery.of(context).size.width * 0.5 + offsetX * 10,
          child: Text(
            floatingEmojis[Random().nextInt(floatingEmojis.length)],
            style: const TextStyle(fontSize: 30),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    if (role == 'seller') {
      return const ProfileScreen();
    }

    if (_pages.isEmpty) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    return Scaffold(
      body: _pages[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        selectedItemColor: Colors.green,
        unselectedItemColor: Colors.grey,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: '–ë–∞—Å—Ç—ã –±–µ—Ç'),
          BottomNavigationBarItem(icon: Icon(Icons.category), label: '–ö–∞—Ç–∞–ª–æ–≥'),
          BottomNavigationBarItem(
            icon: Icon(Icons.shopping_cart),
            label: '–°–µ–±–µ—Ç',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.favorite),
            label: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: '–ü—Ä–æ—Ñ–∏–ª—å'),
        ],
      ),
    );
  }
}
